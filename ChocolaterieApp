// Classe principale pour exécuter le programme
public class ChocolaterieApp {
    public static void main(String[] args) {
        // Paramètres configurables
        int nombreChocolatiers = 3;  // Valeur par défaut comme dans la spécification
        int nombreTempereuses = 1;   // Valeur par défaut comme dans la spécification
        int nombreMouleuses = 1;     // Valeur par défaut comme dans la spécification
        
        // Configuration via arguments en ligne de commande
        if (args.length > 0) {
            try {
                nombreChocolatiers = Integer.parseInt(args[0]);
                if (args.length > 1) {
                    nombreTempereuses = Integer.parseInt(args[1]);
                }
                if (args.length > 2) {
                    nombreMouleuses = Integer.parseInt(args[2]);
                }
            } catch (NumberFormatException e) {
                System.out.println("Format d'arguments invalide. Utilisation des valeurs par défaut.");
            }
        }
        
        // Affichage de la configuration initiale
        System.out.println("=== Configuration de la Chocolaterie de Willy Wonka ===");
        System.out.println("Nombre de chocolatiers: " + nombreChocolatiers);
        System.out.println("Nombre de tempéreuses: " + nombreTempereuses);
        System.out.println("Nombre de mouleuses: " + nombreMouleuses);
        System.out.println("====================================================");
        
        // Création des ressources partagées
        ControleTempereuse controleTempereuse = new ControleTempereuse(nombreTempereuses);
        ControleMouleuse controleMouleuse = new ControleMouleuse(nombreMouleuses);
        ApprovisionnementManager approManager = new ApprovisionnementManager();
        
        // Création des chocolatiers
        Thread[] chocolatiersN = new Thread[nombreChocolatiers];
        Thread[] chocolatiersB = new Thread[nombreChocolatiers];
        
        for (int i = 0; i < nombreChocolatiers; i++) {
            chocolatiersN[i] = new Thread(new Chocolatier("n", i+1, controleTempereuse, controleMouleuse, approManager));
            chocolatiersB[i] = new Thread(new Chocolatier("b", i+1, controleTempereuse, controleMouleuse, approManager));
            
            // Définir les priorités pour éviter la famine
            // Les chocolatiers de type "n" ont une priorité plus élevée
            chocolatiersN[i].setPriority(Thread.MAX_PRIORITY);
            chocolatiersB[i].setPriority(Thread.MIN_PRIORITY);
            
            chocolatiersN[i].start();
            chocolatiersB[i].start();
        }
        
        // Simulation de ruptures périodiques
        Thread ruptureThread = new Thread(new RuptureSimulator(approManager, nombreChocolatiers));
        ruptureThread.start();
        
        // Interface utilisateur simple pour modifier les paramètres pendant l'exécution
        Thread uiThread = new Thread(new SimpleUI(controleTempereuse, controleMouleuse));
        uiThread.start();
    }
}